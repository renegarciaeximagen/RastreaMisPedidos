///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Facturas'
// Generated by LLBLGen v1.21.2003.712 Final on: Mi√©rcoles, 07 de Julio de 2010, 09:49:03 p.m.
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Componente.Conexion;
namespace Componente.Procesos
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Facturas'.
	/// </summary>
	public class Facturas : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_facturas_DocDate, _facturas_FechaVencimiento;
            private SqlInt32 _facturas_ZipCode, _facturas_DocNum, _facturas_DocEntry, _facturasId, _cat_Status_Id, _facturaElectro, _numPedido;                 
			private SqlInt16		_facturas_SlpCode, _facturas_PlazoDias;
            private SqlString _facturas_ImplicaProduccion, _facturas_TipoPago, _facturas_CardName, _facturas_CardCode, _facturas_DirEmbar, _facturas_Address, _filtroEstatus, _status, _vendedor;

         

         
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Facturas()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Facturas_DocEntry</LI>
		///		 <LI>Facturas_DocNum</LI>
		///		 <LI>Facturas_CardCode</LI>
		///		 <LI>Facturas_CardName</LI>
		///		 <LI>Facturas_Address</LI>
		///		 <LI>Facturas_ZipCode. May be SqlInt32.Null</LI>
		///		 <LI>Facturas_DocDate</LI>
		///		 <LI>Facturas_DirEmbar</LI>
		///		 <LI>Facturas_SlpCode</LI>
		///		 <LI>Facturas_ImplicaProduccion</LI>
		///		 <LI>Facturas_TipoPago</LI>
		///		 <LI>Facturas_PlazoDias</LI>
		///		 <LI>Facturas_FechaVencimiento</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_Facturas_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocEntry", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocEntry));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_CardCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_CardName", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_Address", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_Address));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_ZipCode", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _facturas_ZipCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFacturas_DocDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_DocDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_DirEmbar", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_DirEmbar));
				cmdToExecute.Parameters.Add(new SqlParameter("@siFacturas_SlpCode", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturas_SlpCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_ImplicaProduccion", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_ImplicaProduccion));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_TipoPago", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_TipoPago));
				cmdToExecute.Parameters.Add(new SqlParameter("@siFacturas_PlazoDias", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturas_PlazoDias));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFacturas_FechaVencimiento", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_FechaVencimiento));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_facturasId = (Int32)cmdToExecute.Parameters["@iFacturasId"].Value;
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_Facturas_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Facturas::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>Facturas_DocEntry</LI>
		///		 <LI>Facturas_DocNum</LI>
		///		 <LI>Facturas_CardCode</LI>
		///		 <LI>Facturas_CardName</LI>
		///		 <LI>Facturas_Address</LI>
		///		 <LI>Facturas_ZipCode. May be SqlInt32.Null</LI>
		///		 <LI>Facturas_DocDate</LI>
		///		 <LI>Facturas_DirEmbar</LI>
		///		 <LI>Facturas_SlpCode</LI>
		///		 <LI>Facturas_ImplicaProduccion</LI>
		///		 <LI>Facturas_TipoPago</LI>
		///		 <LI>Facturas_PlazoDias</LI>
		///		 <LI>Facturas_FechaVencimiento</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_Facturas_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocEntry", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocEntry));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_CardCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_CardName", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_Address", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_Address));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_ZipCode", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _facturas_ZipCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFacturas_DocDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_DocDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_DirEmbar", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_DirEmbar));
				cmdToExecute.Parameters.Add(new SqlParameter("@siFacturas_SlpCode", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturas_SlpCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_ImplicaProduccion", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_ImplicaProduccion));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_TipoPago", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_TipoPago));
				cmdToExecute.Parameters.Add(new SqlParameter("@siFacturas_PlazoDias", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturas_PlazoDias));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFacturas_FechaVencimiento", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_FechaVencimiento));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_Facturas_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Facturas::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_Facturas_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_Facturas_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Facturas::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>FacturasId</LI>
		///		 <LI>Facturas_DocEntry</LI>
		///		 <LI>Facturas_DocNum</LI>
		///		 <LI>Facturas_CardCode</LI>
		///		 <LI>Facturas_CardName</LI>
		///		 <LI>Facturas_Address</LI>
		///		 <LI>Facturas_ZipCode</LI>
		///		 <LI>Facturas_DocDate</LI>
		///		 <LI>Facturas_DirEmbar</LI>
		///		 <LI>Facturas_SlpCode</LI>
		///		 <LI>Facturas_ImplicaProduccion</LI>
		///		 <LI>Facturas_TipoPago</LI>
		///		 <LI>Facturas_PlazoDias</LI>
		///		 <LI>Facturas_FechaVencimiento</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Facturas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
					_facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
					_facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
					_facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
					_facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
					_facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
					_facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
					_facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
					_facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
					_facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
					_facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
					_facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
					_facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
					_facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Facturas::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
        }
        public DataTable SelectOne15Dias()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_Ultimos15]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sNumcliente", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_Ultimos15' reported the ErrorCode: " + _errorCode);
                }

             
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public  DataTable SelectEvaluaServicio()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectEvaluaServicio]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocEntry", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocEntry));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

              
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Facturas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Facturas::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public  DataTable SelecPartidastAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_ProduccionPartidas_SelectAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public  DataTable SelectAll_Estatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectEstatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iCat_Status_Id", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _cat_Status_Id));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        //public DataTable SelectAllEmb()
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_FacturasEmbarcar_SelAll]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("Facturas");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if (_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_FacturasEmbarcar_SelAll' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("Facturas::SelectAll::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}
        public DataTable SelectFacturasCalidadSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasCalidad_SelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@ImpProd", SqlDbType.VarChar);
                prm.Value = Facturas_ImplicaProduccion;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasCalidad_SelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectFacturasCalidadSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectFacturasRecEmbSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasRecepEmb_SelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@ImpProd", SqlDbType.VarChar);
                prm.Value = Facturas_ImplicaProduccion;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasCalidad_SelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectFacturasCalidadSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        
        public DataTable FacturasARecibirSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactEmbarcarSelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spFactEmbarcarSelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::FacturasARecibirSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable FacturasARecibirSelAllCount()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactEmbarcarSelAllCount]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spFactEmbarcarSelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::FacturasARecibirSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }    
        public DataTable FacturasOkCalSinProdSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactOkCalSinProdSelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spFactOkCalSinProdSelAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::FacturasOkCalSinProdSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable FacturasOkCalSinProdSelAllCount()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactOkCalSinProdSelAllCount]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spFactOkCalSinProdSelAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::FacturasOkCalSinProdSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllEmb(string strFil)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasEmbarcar_SelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@sFiltro", SqlDbType.VarChar);
                prm.Value = strFil;
                cmdToExecute.Parameters.Add(prm);
                prm = null;

                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasEmbarcar_SelAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public DataTable SelectFiltro_Estatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectEstatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sFiltro", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _filtroEstatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectFacTurasValesProdu()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_SelecVales]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    //_facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                    //_facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                    //_facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                    //_facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                    //_facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                    //_facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                    //_facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                    //_facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                    //_facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                    //_facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                    //_facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                    //_facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                    //_facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                    //_facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectValidadNota()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_NT_Evalua]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

             
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public  DataTable SelectFacturaDocEntry()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectDocEntry]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public DataTable SelecHojaViaje()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Selec_FacturasCIPE]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
      

        public DataTable SelecHojaViajeHojaviaje()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Selec_FacturasCIPE_BuscaFac]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@idFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
      

        public DataTable SelecHojaViajeFacturas()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Selec_CIPE_BuscaFacTura]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
      

        public DataTable SelecHojaViajeNumCliente()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Selec_CIPE_BuscaNumClienteG]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sFacturas_CardCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturas_CardCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
      

        public DataTable SelecHojaViajeEstatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Selec_CIPE_BuscaNumClienteStatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@cat_Status_Orden", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _status));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectPedidoVendedor()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPedidoVendedor]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_Facturas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _numPedido = (Int32)toReturn.Rows[0]["NumPedido"];
                    _vendedor = (string)toReturn.Rows[0]["Vendedor"];

                }
                else
                {
                    _numPedido = 0;
                    _vendedor = "Sin Datos";
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
      

        /// <summary>
        /// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>FacturasId</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        ///		 <LI>FacturasId</LI>
        ///		 <LI>Facturas_DocEntry</LI>
        ///		 <LI>Facturas_DocNum</LI>
        ///		 <LI>Facturas_CardCode</LI>
        ///		 <LI>Facturas_CardName</LI>
        ///		 <LI>Facturas_Address</LI>
        ///		 <LI>Facturas_ZipCode</LI>
        ///		 <LI>Facturas_DocDate</LI>
        ///		 <LI>Facturas_DirEmbar</LI>
        ///		 <LI>Facturas_SlpCode</LI>
        ///		 <LI>Facturas_ImplicaProduccion</LI>
        ///		 <LI>Facturas_TipoPago</LI>
        ///		 <LI>Facturas_PlazoDias</LI>
        ///		 <LI>Facturas_FechaVencimiento</LI>
        /// </UL>
        /// Will fill all properties corresponding with a field in the table with the value of the row selected.
        /// </remarks>
        public  DataTable SelectFolioElectronico()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "SELECT dbo.[FolioFacturaElect] (" + _facturas_DocEntry.ToString() + ") ";
            cmdToExecute.CommandType = CommandType.Text;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
            

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);


                if (toReturn.Rows.Count > 0 )
                {
                    if (toReturn.Rows[0]["Column1"].ToString().Length > 0)
                    {
                        _facturaElectro = (Int32)toReturn.Rows[0]["Column1"];
                    }
                    else
                    {
                        _facturaElectro = 0;
                    }
                
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        #region Class Property Declarations
        public SqlInt32 FacturasId
		{
			get
			{
				return _facturasId;
			}
			set
			{
				SqlInt32 facturasIdTmp = (SqlInt32)value;
				if(facturasIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FacturasId", "FacturasId can't be NULL");
				}
				_facturasId = value;
			}
		}
        public SqlString FiltroEstatus
        {
            get { return _filtroEstatus; }
            set { _filtroEstatus = value; }
        }
        public SqlInt32 Cat_Status_Id
        {
            get { return _cat_Status_Id; }
            set { _cat_Status_Id = value; }
        }
		public SqlInt32 Facturas_DocEntry
		{
			get
			{
				return _facturas_DocEntry;
			}
			set
			{
				SqlInt32 facturas_DocEntryTmp = (SqlInt32)value;
				if(facturas_DocEntryTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_DocEntry", "Facturas_DocEntry can't be NULL");
				}
				_facturas_DocEntry = value;
			}
		}
        public SqlInt32 FacturaElectro
        {
            get { return _facturaElectro; }
            set { _facturaElectro = value; }
        }


		public SqlInt32 Facturas_DocNum
		{
			get
			{
				return _facturas_DocNum;
			}
			set
			{
				SqlInt32 facturas_DocNumTmp = (SqlInt32)value;
				if(facturas_DocNumTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_DocNum", "Facturas_DocNum can't be NULL");
				}
				_facturas_DocNum = value;
			}
		}


		public SqlString Facturas_CardCode
		{
			get
			{
				return _facturas_CardCode;
			}
			set
			{
				SqlString facturas_CardCodeTmp = (SqlString)value;
				if(facturas_CardCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_CardCode", "Facturas_CardCode can't be NULL");
				}
				_facturas_CardCode = value;
			}
		}


		public SqlString Facturas_CardName
		{
			get
			{
				return _facturas_CardName;
			}
			set
			{
				SqlString facturas_CardNameTmp = (SqlString)value;
				if(facturas_CardNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_CardName", "Facturas_CardName can't be NULL");
				}
				_facturas_CardName = value;
			}
		}


		public SqlString Facturas_Address
		{
			get
			{
				return _facturas_Address;
			}
			set
			{
				SqlString facturas_AddressTmp = (SqlString)value;
				if(facturas_AddressTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_Address", "Facturas_Address can't be NULL");
				}
				_facturas_Address = value;
			}
		}


		public SqlInt32 Facturas_ZipCode
		{
			get
			{
				return _facturas_ZipCode;
			}
			set
			{
				_facturas_ZipCode = value;
			}
		}


		public SqlDateTime Facturas_DocDate
		{
			get
			{
				return _facturas_DocDate;
			}
			set
			{
				SqlDateTime facturas_DocDateTmp = (SqlDateTime)value;
				if(facturas_DocDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_DocDate", "Facturas_DocDate can't be NULL");
				}
				_facturas_DocDate = value;
			}
		}


		public SqlString Facturas_DirEmbar
		{
			get
			{
				return _facturas_DirEmbar;
			}
			set
			{
				SqlString facturas_DirEmbarTmp = (SqlString)value;
				if(facturas_DirEmbarTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_DirEmbar", "Facturas_DirEmbar can't be NULL");
				}
				_facturas_DirEmbar = value;
			}
		}


		public SqlInt16 Facturas_SlpCode
		{
			get
			{
				return _facturas_SlpCode;
			}
			set
			{
				SqlInt16 facturas_SlpCodeTmp = (SqlInt16)value;
				if(facturas_SlpCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_SlpCode", "Facturas_SlpCode can't be NULL");
				}
				_facturas_SlpCode = value;
			}
		}


		public SqlString Facturas_ImplicaProduccion
		{
			get
			{
				return _facturas_ImplicaProduccion;
			}
			set
			{
				SqlString facturas_ImplicaProduccionTmp = (SqlString)value;
				if(facturas_ImplicaProduccionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_ImplicaProduccion", "Facturas_ImplicaProduccion can't be NULL");
				}
				_facturas_ImplicaProduccion = value;
			}
		}


		public SqlString Facturas_TipoPago
		{
			get
			{
				return _facturas_TipoPago;
			}
			set
			{
				SqlString facturas_TipoPagoTmp = (SqlString)value;
				if(facturas_TipoPagoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_TipoPago", "Facturas_TipoPago can't be NULL");
				}
				_facturas_TipoPago = value;
			}
		}


		public SqlInt16 Facturas_PlazoDias
		{
			get
			{
				return _facturas_PlazoDias;
			}
			set
			{
				SqlInt16 facturas_PlazoDiasTmp = (SqlInt16)value;
				if(facturas_PlazoDiasTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_PlazoDias", "Facturas_PlazoDias can't be NULL");
				}
				_facturas_PlazoDias = value;
			}
		}


		public SqlDateTime Facturas_FechaVencimiento
		{
			get
			{
				return _facturas_FechaVencimiento;
			}
			set
			{
				SqlDateTime facturas_FechaVencimientoTmp = (SqlDateTime)value;
				if(facturas_FechaVencimientoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facturas_FechaVencimiento", "Facturas_FechaVencimiento can't be NULL");
				}
				_facturas_FechaVencimiento = value;
			}
		}

        public SqlString Status
        {
            get { return _status; }
            set { _status = value; }
        }

        public SqlInt32 NumPedido
        {
            get { return _numPedido; }
            set { _numPedido = value; }
        }
        public SqlString Vendedor
        {
            get { return _vendedor; }
            set { _vendedor = value; }
        }
		#endregion
	}
}
