///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'LogXml'
// Generated by LLBLGen v1.21.2003.712 Final on: Mi√©rcoles, 03 de Noviembre de 2010, 12:03:13 p.m.
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Componente.Conexion;


namespace Componente.Procesos
{
	/// <summary>
	/// Purpose: Data Access class for the table 'LogXml'.
	/// </summary>
	public class LogXml : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_logXml_Date;
			private SqlInt32		_logXml_TrasId, _idLogXml, _logXml_FacturasId;
            private SqlString _logXml_Up, _logXml_NombreXml, _logXml_Dir_Xml, _logXml_Dir_XmlOK, _fechafiltra;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public LogXml()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>LogXml_NombreXml</LI>
		///		 <LI>LogXml_Dir_Xml</LI>
		///		 <LI>LogXml_Dir_XmlOK</LI>
		///		 <LI>LogXml_Up</LI>
		///		 <LI>LogXml_Date</LI>
		///		 <LI>LogXml_TrasId. May be SqlInt32.Null</LI>
		///		 <LI>LogXml_FacturasId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>IdLogXml</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_reg_LogXml_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_NombreXml", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_NombreXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Dir_Xml", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Dir_Xml));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Dir_XmlOK", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Dir_XmlOK));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Up", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Up));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLogXml_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLogXml_TrasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _logXml_TrasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLogXml_FacturasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _logXml_FacturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iidLogXml", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _idLogXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_idLogXml = (Int32)cmdToExecute.Parameters["@iidLogXml"].Value;
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_reg_LogXml_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("LogXml::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>IdLogXml</LI>
		///		 <LI>LogXml_NombreXml</LI>
		///		 <LI>LogXml_Dir_Xml</LI>
		///		 <LI>LogXml_Dir_XmlOK</LI>
		///		 <LI>LogXml_Up</LI>
		///		 <LI>LogXml_Date</LI>
		///		 <LI>LogXml_TrasId. May be SqlInt32.Null</LI>
		///		 <LI>LogXml_FacturasId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_reg_LogXml_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iidLogXml", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _idLogXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_NombreXml", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_NombreXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Dir_Xml", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Dir_Xml));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Dir_XmlOK", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Dir_XmlOK));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLogXml_Up", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Up));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLogXml_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _logXml_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLogXml_TrasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _logXml_TrasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLogXml_FacturasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _logXml_FacturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_reg_LogXml_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("LogXml::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>IdLogXml</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_reg_LogXml_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iidLogXml", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _idLogXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_reg_LogXml_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("LogXml::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>IdLogXml</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>IdLogXml</LI>
		///		 <LI>LogXml_NombreXml</LI>
		///		 <LI>LogXml_Dir_Xml</LI>
		///		 <LI>LogXml_Dir_XmlOK</LI>
		///		 <LI>LogXml_Up</LI>
		///		 <LI>LogXml_Date</LI>
		///		 <LI>LogXml_TrasId</LI>
		///		 <LI>LogXml_FacturasId</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_reg_LogXml_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("LogXml");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iidLogXml", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _idLogXml));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_reg_LogXml_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_idLogXml = (Int32)toReturn.Rows[0]["idLogXml"];
					_logXml_NombreXml = (string)toReturn.Rows[0]["LogXml_NombreXml"];
					_logXml_Dir_Xml = (string)toReturn.Rows[0]["LogXml_Dir_Xml"];
					_logXml_Dir_XmlOK = (string)toReturn.Rows[0]["LogXml_Dir_XmlOK"];
					_logXml_Up = (string)toReturn.Rows[0]["LogXml_Up"];
					_logXml_Date = (DateTime)toReturn.Rows[0]["LogXml_Date"];
					_logXml_TrasId = toReturn.Rows[0]["LogXml_TrasId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LogXml_TrasId"];
					_logXml_FacturasId = toReturn.Rows[0]["LogXml_FacturasId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LogXml_FacturasId"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("LogXml::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_postFack_LogXml_Select]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("LogXml");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_reg_LogXml_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("LogXml::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public  DataTable SelectOneFecha()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_LogTrasMan_SelectOneFecha]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("LogXml");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sFiltroFecha", SqlDbType.NVarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fechafiltra));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_reg_LogXml_SelectOne' reported the ErrorCode: " + _errorCode);
                }

        
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("LogXml::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
		#region Class Property Declarations
		public SqlInt32 IdLogXml
		{
			get
			{
				return _idLogXml;
			}
			set
			{
				SqlInt32 idLogXmlTmp = (SqlInt32)value;
				if(idLogXmlTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("IdLogXml", "IdLogXml can't be NULL");
				}
				_idLogXml = value;
			}
		}


		public SqlString LogXml_NombreXml
		{
			get
			{
				return _logXml_NombreXml;
			}
			set
			{
				SqlString logXml_NombreXmlTmp = (SqlString)value;
				if(logXml_NombreXmlTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LogXml_NombreXml", "LogXml_NombreXml can't be NULL");
				}
				_logXml_NombreXml = value;
			}
		}


		public SqlString LogXml_Dir_Xml
		{
			get
			{
				return _logXml_Dir_Xml;
			}
			set
			{
				SqlString logXml_Dir_XmlTmp = (SqlString)value;
				if(logXml_Dir_XmlTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LogXml_Dir_Xml", "LogXml_Dir_Xml can't be NULL");
				}
				_logXml_Dir_Xml = value;
			}
		}


		public SqlString LogXml_Dir_XmlOK
		{
			get
			{
				return _logXml_Dir_XmlOK;
			}
			set
			{
				SqlString logXml_Dir_XmlOKTmp = (SqlString)value;
				if(logXml_Dir_XmlOKTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LogXml_Dir_XmlOK", "LogXml_Dir_XmlOK can't be NULL");
				}
				_logXml_Dir_XmlOK = value;
			}
		}


		public SqlString LogXml_Up
		{
			get
			{
				return _logXml_Up;
			}
			set
			{
				SqlString logXml_UpTmp = (SqlString)value;
				if(logXml_UpTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LogXml_Up", "LogXml_Up can't be NULL");
				}
				_logXml_Up = value;
			}
		}


		public SqlDateTime LogXml_Date
		{
			get
			{
				return _logXml_Date;
			}
			set
			{
				SqlDateTime logXml_DateTmp = (SqlDateTime)value;
				if(logXml_DateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LogXml_Date", "LogXml_Date can't be NULL");
				}
				_logXml_Date = value;
			}
		}


		public SqlInt32 LogXml_TrasId
		{
			get
			{
				return _logXml_TrasId;
			}
			set
			{
				_logXml_TrasId = value;
			}
		}


		public SqlInt32 LogXml_FacturasId
		{
			get
			{
				return _logXml_FacturasId;
			}
			set
			{
				_logXml_FacturasId = value;
			}
		}


        public SqlString Fechafiltra
        {
            get { return _fechafiltra; }
            set { _fechafiltra = value; }
        }
		#endregion
	}
}
