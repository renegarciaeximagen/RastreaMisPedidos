///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TrasManPartidas'
// Generated by LLBLGen v1.21.2003.712 Final on: Mi√©rcoles, 04 de Agosto de 2010, 06:58:29 p.m.
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Componente.Conexion;
namespace Componente.Procesos
{
	/// <summary>
	/// Purpose: Data Access class for the table 'TrasManPartidas'.
	/// </summary>
	public class TrasManPartidas : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_subUsuRecibe, _trasManPartidasFacRelacio, _trasManPartidasDiferencia, _trasManPartidasIdSAP, _subUsuAutoriza, _subUsuSolicita, _trasManPartidasCantidadRecib, _trasManPartidas_ID, _trasManPartidasCantidadEnvia, _trasManId;
			private SqlString		_trasManPartidasClavePro, _trasManPartidasLotes, _trasManPartidasDescrip;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TrasManPartidas()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManId</LI>
		///		 <LI>TrasManPartidas_ID</LI>
		///		 <LI>TrasManPartidasClavePro</LI>
		///		 <LI>TrasManPartidasDescrip</LI>
		///		 <LI>TrasManPartidasCantidadEnvia</LI>
		///		 <LI>TrasManPartidasLotes. May be SqlString.Null</LI>
		///		 <LI>TrasManPartidasCantidadRecib. May be SqlInt32.Null</LI>
		///		 <LI>TrasManPartidasDiferencia. May be SqlInt32.Null</LI>
		///		 <LI>TrasManPartidasFacRelacio. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuRecibe. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuSolicita. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuAutoriza</LI>
		///		 <LI>TrasManPartidasIdSAP. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasClavePro", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasClavePro));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasDescrip", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasDescrip));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasCantidadEnvia", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasCantidadEnvia));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasLotes", SqlDbType.VarChar, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasLotes));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasCantidadRecib", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasCantidadRecib));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasDiferencia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasDiferencia));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasFacRelacio", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasFacRelacio));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuRecibe", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuRecibe));
                cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuSolicita", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuSolicita));
                cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuAutoriza", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuAutoriza));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasIdSAP", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasIdSAP));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManId</LI>
		///		 <LI>TrasManPartidas_ID</LI>
		///		 <LI>TrasManPartidasClavePro</LI>
		///		 <LI>TrasManPartidasDescrip</LI>
		///		 <LI>TrasManPartidasCantidadEnvia</LI>
		///		 <LI>TrasManPartidasLotes. May be SqlString.Null</LI>
		///		 <LI>TrasManPartidasCantidadRecib. May be SqlInt32.Null</LI>
		///		 <LI>TrasManPartidasDiferencia. May be SqlInt32.Null</LI>
		///		 <LI>TrasManPartidasFacRelacio. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuRecibe. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuSolicita. May be SqlInt32.Null</LI>
		///		 <LI>SubUsuAutoriza</LI>
		///		 <LI>TrasManPartidasIdSAP. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasClavePro", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasClavePro));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasDescrip", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasDescrip));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasCantidadEnvia", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasCantidadEnvia));
				cmdToExecute.Parameters.Add(new SqlParameter("@sTrasManPartidasLotes", SqlDbType.VarChar, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _trasManPartidasLotes));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasCantidadRecib", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasCantidadRecib));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasDiferencia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasDiferencia));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasFacRelacio", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasFacRelacio));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuRecibe", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuRecibe));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuSolicita", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuSolicita));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuAutoriza", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _subUsuAutoriza));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasIdSAP", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasIdSAP));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}
        public  bool UpdateTrasRec()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_UpdateTrasRec]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasCantidadRecib", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasCantidadRecib));
                cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidasDiferencia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _trasManPartidasDiferencia));              
                cmdToExecute.Parameters.Add(new SqlParameter("@iSubUsuRecibe", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _subUsuRecibe));             
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TrasManPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManId</LI>
		///		 <LI>TrasManPartidas_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'TrasManId'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'TrasManId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWTrasManIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_DeleteAllWTrasManIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_DeleteAllWTrasManIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::DeleteAllWTrasManIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'TrasManPartidas_ID'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'TrasManPartidas_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManPartidas_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWTrasManPartidas_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_DeleteAllWTrasManPartidas_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_DeleteAllWTrasManPartidas_IDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::DeleteAllWTrasManPartidas_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TrasManId</LI>
		///		 <LI>TrasManPartidas_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>TrasManId</LI>
		///		 <LI>TrasManPartidas_ID</LI>
		///		 <LI>TrasManPartidasClavePro</LI>
		///		 <LI>TrasManPartidasDescrip</LI>
		///		 <LI>TrasManPartidasCantidadEnvia</LI>
		///		 <LI>TrasManPartidasLotes</LI>
		///		 <LI>TrasManPartidasCantidadRecib</LI>
		///		 <LI>TrasManPartidasDiferencia</LI>
		///		 <LI>TrasManPartidasFacRelacio</LI>
		///		 <LI>SubUsuRecibe</LI>
		///		 <LI>SubUsuSolicita</LI>
		///		 <LI>SubUsuAutoriza</LI>
		///		 <LI>TrasManPartidasIdSAP</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("TrasManPartidas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManId));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iTrasManPartidas_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _trasManPartidas_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
				}

                //if(toReturn.Rows.Count > 0)
                //{
                //    _trasManId = (Int32)toReturn.Rows[0]["TrasManId"];
                //    _trasManPartidas_ID = (Int32)toReturn.Rows[0]["TrasManPartidas_ID"];
                //    _trasManPartidasClavePro = (string)toReturn.Rows[0]["TrasManPartidasClavePro"];
                //    _trasManPartidasDescrip = (string)toReturn.Rows[0]["TrasManPartidasDescrip"];
                //    _trasManPartidasCantidadEnvia = (Int32)toReturn.Rows[0]["TrasManPartidasCantidadEnvia"];
                //    _trasManPartidasLotes = toReturn.Rows[0]["TrasManPartidasLotes"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["TrasManPartidasLotes"];
                //    _trasManPartidasCantidadRecib = toReturn.Rows[0]["TrasManPartidasCantidadRecib"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["TrasManPartidasCantidadRecib"];
                //    _trasManPartidasDiferencia = toReturn.Rows[0]["TrasManPartidasDiferencia"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["TrasManPartidasDiferencia"];
                //    _trasManPartidasFacRelacio = toReturn.Rows[0]["TrasManPartidasFacRelacio"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["TrasManPartidasFacRelacio"];
                //    _subUsuRecibe = toReturn.Rows[0]["SubUsuRecibe"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["SubUsuRecibe"];
                //    _subUsuSolicita = toReturn.Rows[0]["SubUsuSolicita"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["SubUsuSolicita"];
                //    _subUsuAutoriza = (Int32)toReturn.Rows[0]["SubUsuAutoriza"];
                //    _trasManPartidasIdSAP = toReturn.Rows[0]["TrasManPartidasIdSAP"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["TrasManPartidasIdSAP"];
                //}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_TrasManPartidas_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("TrasManPartidas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_TrasManPartidas_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TrasManPartidas::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 TrasManId
		{
			get
			{
				return _trasManId;
			}
			set
			{
				SqlInt32 trasManIdTmp = (SqlInt32)value;
				if(trasManIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TrasManId", "TrasManId can't be NULL");
				}
				_trasManId = value;
			}
		}


		public SqlInt32 TrasManPartidas_ID
		{
			get
			{
				return _trasManPartidas_ID;
			}
			set
			{
				SqlInt32 trasManPartidas_IDTmp = (SqlInt32)value;
				if(trasManPartidas_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TrasManPartidas_ID", "TrasManPartidas_ID can't be NULL");
				}
				_trasManPartidas_ID = value;
			}
		}


		public SqlString TrasManPartidasClavePro
		{
			get
			{
				return _trasManPartidasClavePro;
			}
			set
			{
				SqlString trasManPartidasClaveProTmp = (SqlString)value;
				if(trasManPartidasClaveProTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TrasManPartidasClavePro", "TrasManPartidasClavePro can't be NULL");
				}
				_trasManPartidasClavePro = value;
			}
		}


		public SqlString TrasManPartidasDescrip
		{
			get
			{
				return _trasManPartidasDescrip;
			}
			set
			{
				SqlString trasManPartidasDescripTmp = (SqlString)value;
				if(trasManPartidasDescripTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TrasManPartidasDescrip", "TrasManPartidasDescrip can't be NULL");
				}
				_trasManPartidasDescrip = value;
			}
		}


		public SqlInt32 TrasManPartidasCantidadEnvia
		{
			get
			{
				return _trasManPartidasCantidadEnvia;
			}
			set
			{
				SqlInt32 trasManPartidasCantidadEnviaTmp = (SqlInt32)value;
				if(trasManPartidasCantidadEnviaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TrasManPartidasCantidadEnvia", "TrasManPartidasCantidadEnvia can't be NULL");
				}
				_trasManPartidasCantidadEnvia = value;
			}
		}


		public SqlString TrasManPartidasLotes
		{
			get
			{
				return _trasManPartidasLotes;
			}
			set
			{
				_trasManPartidasLotes = value;
			}
		}


		public SqlInt32 TrasManPartidasCantidadRecib
		{
			get
			{
				return _trasManPartidasCantidadRecib;
			}
			set
			{
				_trasManPartidasCantidadRecib = value;
			}
		}


		public SqlInt32 TrasManPartidasDiferencia
		{
			get
			{
				return _trasManPartidasDiferencia;
			}
			set
			{
				_trasManPartidasDiferencia = value;
			}
		}


		public SqlInt32 TrasManPartidasFacRelacio
		{
			get
			{
				return _trasManPartidasFacRelacio;
			}
			set
			{
				_trasManPartidasFacRelacio = value;
			}
		}


		public SqlInt32 SubUsuRecibe
		{
			get
			{
				return _subUsuRecibe;
			}
			set
			{
				_subUsuRecibe = value;
			}
		}


		public SqlInt32 SubUsuSolicita
		{
			get
			{
				return _subUsuSolicita;
			}
			set
			{
				_subUsuSolicita = value;
			}
		}


		public SqlInt32 SubUsuAutoriza
		{
			get
			{
				return _subUsuAutoriza;
			}
			set
			{
				SqlInt32 subUsuAutorizaTmp = (SqlInt32)value;
				if(subUsuAutorizaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SubUsuAutoriza", "SubUsuAutoriza can't be NULL");
				}
				_subUsuAutoriza = value;
			}
		}


		public SqlInt32 TrasManPartidasIdSAP
		{
			get
			{
				return _trasManPartidasIdSAP;
			}
			set
			{
				_trasManPartidasIdSAP = value;
			}
		}
		#endregion
	}
}
