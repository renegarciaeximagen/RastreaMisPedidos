///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'BuferTrans'
// Generated by LLBLGen v1.21.2003.712 Final on: Mi√©rcoles, 07 de Julio de 2010, 09:49:03 p.m.
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Componente.Conexion;

namespace Componente.Procesos
{
	/// <summary>
	/// Purpose: Data Access class for the table 'BuferTrans'.
	/// </summary>
	public class BuferTrans : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_buferTransFechaConta, _buferTransFechaDocu;
			private SqlInt32		_buferTransFacturaOrigen, _buferTransId;
			private SqlInt16		_buferTransAlmacenOrigen, _buferTransNum;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public BuferTrans()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>BuferTransNum</LI>
		///		 <LI>BuferTransFacturaOrigen</LI>
		///		 <LI>BuferTransFechaConta</LI>
		///		 <LI>BuferTransFechaDocu</LI>
		///		 <LI>BuferTransAlmacenOrigen</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>BuferTransId</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_BuferTrans_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@siBuferTransNum", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _buferTransNum));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransFacturaOrigen", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _buferTransFacturaOrigen));
				cmdToExecute.Parameters.Add(new SqlParameter("@daBuferTransFechaConta", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _buferTransFechaConta));
				cmdToExecute.Parameters.Add(new SqlParameter("@daBuferTransFechaDocu", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _buferTransFechaDocu));
				cmdToExecute.Parameters.Add(new SqlParameter("@siBuferTransAlmacenOrigen", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _buferTransAlmacenOrigen));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransId", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _buferTransId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_buferTransId = (Int32)cmdToExecute.Parameters["@iBuferTransId"].Value;
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_BuferTrans_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("BuferTrans::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>BuferTransId</LI>
		///		 <LI>BuferTransNum</LI>
		///		 <LI>BuferTransFacturaOrigen</LI>
		///		 <LI>BuferTransFechaConta</LI>
		///		 <LI>BuferTransFechaDocu</LI>
		///		 <LI>BuferTransAlmacenOrigen</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_BuferTrans_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _buferTransId));
				cmdToExecute.Parameters.Add(new SqlParameter("@siBuferTransNum", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _buferTransNum));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransFacturaOrigen", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _buferTransFacturaOrigen));
				cmdToExecute.Parameters.Add(new SqlParameter("@daBuferTransFechaConta", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _buferTransFechaConta));
				cmdToExecute.Parameters.Add(new SqlParameter("@daBuferTransFechaDocu", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _buferTransFechaDocu));
				cmdToExecute.Parameters.Add(new SqlParameter("@siBuferTransAlmacenOrigen", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _buferTransAlmacenOrigen));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_BuferTrans_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("BuferTrans::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>BuferTransId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_BuferTrans_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _buferTransId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_BuferTrans_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("BuferTrans::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>BuferTransId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>BuferTransId</LI>
		///		 <LI>BuferTransNum</LI>
		///		 <LI>BuferTransFacturaOrigen</LI>
		///		 <LI>BuferTransFechaConta</LI>
		///		 <LI>BuferTransFechaDocu</LI>
		///		 <LI>BuferTransAlmacenOrigen</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_BuferTrans_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("BuferTrans");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBuferTransId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _buferTransId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_BuferTrans_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_buferTransId = (Int32)toReturn.Rows[0]["BuferTransId"];
					_buferTransNum = (Int16)toReturn.Rows[0]["BuferTransNum"];
					_buferTransFacturaOrigen = (Int32)toReturn.Rows[0]["BuferTransFacturaOrigen"];
					_buferTransFechaConta = (DateTime)toReturn.Rows[0]["BuferTransFechaConta"];
					_buferTransFechaDocu = (DateTime)toReturn.Rows[0]["BuferTransFechaDocu"];
					_buferTransAlmacenOrigen = (Int16)toReturn.Rows[0]["BuferTransAlmacenOrigen"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("BuferTrans::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_BuferTrans_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("BuferTrans");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_BuferTrans_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("BuferTrans::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 BuferTransId
		{
			get
			{
				return _buferTransId;
			}
			set
			{
				SqlInt32 buferTransIdTmp = (SqlInt32)value;
				if(buferTransIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransId", "BuferTransId can't be NULL");
				}
				_buferTransId = value;
			}
		}


		public SqlInt16 BuferTransNum
		{
			get
			{
				return _buferTransNum;
			}
			set
			{
				SqlInt16 buferTransNumTmp = (SqlInt16)value;
				if(buferTransNumTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransNum", "BuferTransNum can't be NULL");
				}
				_buferTransNum = value;
			}
		}


		public SqlInt32 BuferTransFacturaOrigen
		{
			get
			{
				return _buferTransFacturaOrigen;
			}
			set
			{
				SqlInt32 buferTransFacturaOrigenTmp = (SqlInt32)value;
				if(buferTransFacturaOrigenTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransFacturaOrigen", "BuferTransFacturaOrigen can't be NULL");
				}
				_buferTransFacturaOrigen = value;
			}
		}


		public SqlDateTime BuferTransFechaConta
		{
			get
			{
				return _buferTransFechaConta;
			}
			set
			{
				SqlDateTime buferTransFechaContaTmp = (SqlDateTime)value;
				if(buferTransFechaContaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransFechaConta", "BuferTransFechaConta can't be NULL");
				}
				_buferTransFechaConta = value;
			}
		}


		public SqlDateTime BuferTransFechaDocu
		{
			get
			{
				return _buferTransFechaDocu;
			}
			set
			{
				SqlDateTime buferTransFechaDocuTmp = (SqlDateTime)value;
				if(buferTransFechaDocuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransFechaDocu", "BuferTransFechaDocu can't be NULL");
				}
				_buferTransFechaDocu = value;
			}
		}


		public SqlInt16 BuferTransAlmacenOrigen
		{
			get
			{
				return _buferTransAlmacenOrigen;
			}
			set
			{
				SqlInt16 buferTransAlmacenOrigenTmp = (SqlInt16)value;
				if(buferTransAlmacenOrigenTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BuferTransAlmacenOrigen", "BuferTransAlmacenOrigen can't be NULL");
				}
				_buferTransAlmacenOrigen = value;
			}
		}
		#endregion
	}
}
