///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'FacturasPartidas'
// Generated by LLBLGen v1.21.2003.712 Final on: Mi√©rcoles, 07 de Julio de 2010, 09:49:03 p.m.
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Componente.Conexion;
namespace Componente.Procesos
{
	/// <summary>
	/// Purpose: Data Access class for the table 'FacturasPartidas'.
	/// </summary>
	public class FacturasPartidas : DBInteractionBase
	{
        #region Class Member Declarations
        private SqlInt32 _facturasPartidas_Recib_Xhala, _facturasPartidas_Recibi_Embar, _facturasPartidas_Surti_KN, _facturasPartidas_DifKNNotaCre, _facturasPartidas_Producidos, _facturasPartidas_Recib_Produc, _facturasPartidas_EmbarcadoClie, _facturasPartidas_Recib_Calidad, _facturasPartidas_Cantidad, _facturasPartidas_Id, _facturasPartidas_Bufer, _facturasPartidas_OrdenDiseno, _facturasId, _produccionId, _prodCerrada, _facturas_DocNum;

    

        private SqlInt16 _facturasPartidas_Produccion, _facturasPartidas_RecibBultos;
        private SqlString _facturasPartidas_Pedimiento, _facturasPartidas_Clave, _facturasPartidas_EntregaParcia, _facturasPartidas_DescripCion, _itemcodeServicio;

        #endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FacturasPartidas()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>FacturasPartidas_Id</LI>
		///		 <LI>FacturasPartidas_Clave</LI>
		///		 <LI>FacturasPartidas_DescripCion</LI>
		///		 <LI>FacturasPartidas_Cantidad</LI>
		///		 <LI>FacturasPartidas_Bufer</LI>
		///		 <LI>FacturasPartidas_Pedimiento</LI>
		///		 <LI>FacturasPartidas_OrdenDiseno</LI>
		///		 <LI>FacturasPartidas_Surti_KN</LI>
		///		 <LI>FacturasPartidas_DifKNNotaCre</LI>
		///		 <LI>FacturasPartidas_Recib_Xhala</LI>
		///		 <LI>FacturasPartidas_Recibi_Embar</LI>
		///		 <LI>FacturasPartidas_Produccion</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_Clave", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_Clave));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_DescripCion", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_DescripCion));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Cantidad", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Cantidad));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Bufer", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Bufer));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Pedimiento", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Pedimiento));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_OrdenDiseno", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_OrdenDiseno));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Surti_KN", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Surti_KN));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_DifKNNotaCre", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_DifKNNotaCre));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recib_Xhala", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recib_Xhala));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recibi_Embar", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recibi_Embar));
				cmdToExecute.Parameters.Add(new SqlParameter("@siFacturasPartidas_Produccion", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturasPartidas_Produccion));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>FacturasPartidas_Id</LI>
		///		 <LI>FacturasPartidas_Clave</LI>
		///		 <LI>FacturasPartidas_DescripCion</LI>
		///		 <LI>FacturasPartidas_Cantidad</LI>
		///		 <LI>FacturasPartidas_Bufer</LI>
		///		 <LI>FacturasPartidas_Pedimiento</LI>
		///		 <LI>FacturasPartidas_OrdenDiseno</LI>
		///		 <LI>FacturasPartidas_Surti_KN</LI>
		///		 <LI>FacturasPartidas_DifKNNotaCre</LI>
		///		 <LI>FacturasPartidas_Recib_Xhala</LI>
		///		 <LI>FacturasPartidas_Recibi_Embar</LI>
		///		 <LI>FacturasPartidas_Produccion</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
                //cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_Clave", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_Clave));
                //cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_DescripCion", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_DescripCion));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Cantidad", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Cantidad));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Bufer", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Bufer));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Pedimiento", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Pedimiento));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_OrdenDiseno", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_OrdenDiseno));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Surti_KN", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Surti_KN));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_DifKNNotaCre", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_DifKNNotaCre));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recib_Xhala", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recib_Xhala));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recibi_Embar", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recibi_Embar));
                //cmdToExecute.Parameters.Add(new SqlParameter("@siFacturasPartidas_Produccion", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturasPartidas_Produccion));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public  bool UpdateEmb()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_UpdateRecibEmb]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
                //cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_Clave", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_Clave));
                //cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_DescripCion", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_DescripCion));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Cantidad", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Cantidad));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Bufer", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Bufer));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Pedimiento", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Pedimiento));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_OrdenDiseno", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_OrdenDiseno));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Surti_KN", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Surti_KN));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_DifKNNotaCre", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_DifKNNotaCre));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recib_Xhala", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recib_Xhala));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recibi_Embar", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recibi_Embar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_RecibBultos", SqlDbType.SmallInt, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_RecibBultos));

                //cmdToExecute.Parameters.Add(new SqlParameter("@siFacturasPartidas_Produccion", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _facturasPartidas_Produccion));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public bool UpdateReciPro()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_UpdateRecibPro]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Recib_Produc", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recib_Produc));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public bool UpdatePartidasProduci()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_UpdatePartidasProduci]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Producidos", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Producidos));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>FacturasPartidas_Id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public  bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'FacturasId'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'FacturasId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWFacturasIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_DeleteAllWFacturasIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_DeleteAllWFacturasIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::DeleteAllWFacturasIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'FacturasPartidas_Id'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'FacturasPartidas_Id'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasPartidas_Id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWFacturasPartidas_IdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_DeleteAllWFacturasPartidas_IdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_DeleteAllWFacturasPartidas_IdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::DeleteAllWFacturasPartidas_IdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		///		 <LI>FacturasPartidas_Id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>FacturasId</LI>
		///		 <LI>FacturasPartidas_Id</LI>
		///		 <LI>FacturasPartidas_Clave</LI>
		///		 <LI>FacturasPartidas_DescripCion</LI>
		///		 <LI>FacturasPartidas_Cantidad</LI>
		///		 <LI>FacturasPartidas_Bufer</LI>
		///		 <LI>FacturasPartidas_Pedimiento</LI>
		///		 <LI>FacturasPartidas_OrdenDiseno</LI>
		///		 <LI>FacturasPartidas_Surti_KN</LI>
		///		 <LI>FacturasPartidas_DifKNNotaCre</LI>
		///		 <LI>FacturasPartidas_Recib_Xhala</LI>
		///		 <LI>FacturasPartidas_Recibi_Embar</LI>
		///		 <LI>FacturasPartidas_Produccion</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("FacturasPartidas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
                    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                    _facturasPartidas_Id = (Int32)toReturn.Rows[0]["FacturasPartidas_Id"];
                    _facturasPartidas_Clave = (string)toReturn.Rows[0]["FacturasPartidas_Clave"];
                    _facturasPartidas_DescripCion = (string)toReturn.Rows[0]["FacturasPartidas_DescripCion"];
                    _facturasPartidas_Cantidad = (Int32)toReturn.Rows[0]["FacturasPartidas_Cantidad"];
                    _facturasPartidas_Bufer = (Int32)toReturn.Rows[0]["FacturasPartidas_Bufer"];
                    _facturasPartidas_Pedimiento = toReturn.Rows[0]["FacturasPartidas_Pedimiento"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["FacturasPartidas_Pedimiento"];
                    _facturasPartidas_OrdenDiseno = toReturn.Rows[0]["FacturasPartidas_OrdenDiseno"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["FacturasPartidas_OrdenDiseno"];
                    _facturasPartidas_Surti_KN = (Int32)toReturn.Rows[0]["FacturasPartidas_Surti_KN"];
                    _facturasPartidas_DifKNNotaCre = (Int32)toReturn.Rows[0]["FacturasPartidas_DifKNNotaCre"];
                    _facturasPartidas_Recib_Xhala = (Int32)toReturn.Rows[0]["FacturasPartidas_Recib_Xhala"];
                    _facturasPartidas_Recibi_Embar = (Int32)toReturn.Rows[0]["FacturasPartidas_Recibi_Embar"];
                    _facturasPartidas_Produccion = (Int16)toReturn.Rows[0]["FacturasPartidas_Produccion"];
                    _facturasPartidas_EntregaParcia = toReturn.Rows[0]["FacturasPartidas_EntregaParcia"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["FacturasPartidas_EntregaParcia"];
                    _facturasPartidas_EmbarcadoClie = (Int32)toReturn.Rows[0]["FacturasPartidas_EmbarcadoClie"];
                    _facturasPartidas_Recib_Calidad = (Int16)toReturn.Rows[0]["FacturasPartidas_Recib_Calidad"];
                    _facturasPartidas_Producidos = (Int16)toReturn.Rows[0]["FacturasPartidas_Producidos"];
                    _facturasPartidas_Recib_Produc = (Int16)toReturn.Rows[0]["FacturasPartidas_Recib_Produc"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public  DataTable Select_Partidas()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectOne_Partida]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                 cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturasPartidas_Id = (Int32)toReturn.Rows[0]["FacturasPartidas_Id"];
                //    _facturasPartidas_Clave = (string)toReturn.Rows[0]["FacturasPartidas_Clave"];
                //    _facturasPartidas_DescripCion = (string)toReturn.Rows[0]["FacturasPartidas_DescripCion"];
                //    _facturasPartidas_Cantidad = (Int32)toReturn.Rows[0]["FacturasPartidas_Cantidad"];
                //    _facturasPartidas_Bufer = (Int32)toReturn.Rows[0]["FacturasPartidas_Bufer"];
                //    _facturasPartidas_Pedimiento = (Int32)toReturn.Rows[0]["FacturasPartidas_Pedimiento"];
                //    _facturasPartidas_OrdenDiseno = (Int32)toReturn.Rows[0]["FacturasPartidas_OrdenDiseno"];
                //    _facturasPartidas_Surti_KN = (Int32)toReturn.Rows[0]["FacturasPartidas_Surti_KN"];
                //    _facturasPartidas_DifKNNotaCre = (Int32)toReturn.Rows[0]["FacturasPartidas_DifKNNotaCre"];
                //    _facturasPartidas_Recib_Xhala = (Int32)toReturn.Rows[0]["FacturasPartidas_Recib_Xhala"];
                //    _facturasPartidas_Recibi_Embar = (Int32)toReturn.Rows[0]["FacturasPartidas_Recibi_Embar"];
                //    _facturasPartidas_Produccion = (Int16)toReturn.Rows[0]["FacturasPartidas_Produccion"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable Select_PartidasResumen()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectOne_PartidaResumen]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturasPartidas_Id = (Int32)toReturn.Rows[0]["FacturasPartidas_Id"];
                //    _facturasPartidas_Clave = (string)toReturn.Rows[0]["FacturasPartidas_Clave"];
                //    _facturasPartidas_DescripCion = (string)toReturn.Rows[0]["FacturasPartidas_DescripCion"];
                //    _facturasPartidas_Cantidad = (Int32)toReturn.Rows[0]["FacturasPartidas_Cantidad"];
                //    _facturasPartidas_Bufer = (Int32)toReturn.Rows[0]["FacturasPartidas_Bufer"];
                //    _facturasPartidas_Pedimiento = (Int32)toReturn.Rows[0]["FacturasPartidas_Pedimiento"];
                //    _facturasPartidas_OrdenDiseno = (Int32)toReturn.Rows[0]["FacturasPartidas_OrdenDiseno"];
                //    _facturasPartidas_Surti_KN = (Int32)toReturn.Rows[0]["FacturasPartidas_Surti_KN"];
                //    _facturasPartidas_DifKNNotaCre = (Int32)toReturn.Rows[0]["FacturasPartidas_DifKNNotaCre"];
                //    _facturasPartidas_Recib_Xhala = (Int32)toReturn.Rows[0]["FacturasPartidas_Recib_Xhala"];
                //    _facturasPartidas_Recibi_Embar = (Int32)toReturn.Rows[0]["FacturasPartidas_Recibi_Embar"];
                //    _facturasPartidas_Produccion = (Int16)toReturn.Rows[0]["FacturasPartidas_Produccion"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public  DataTable SelectOnePart()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectOneParti]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

               
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectOnePartProduccion()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectOne_Parti]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iProduccionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _produccionId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }


                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectOnePart_Servicio()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Partida_Servicio]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sFacturasPartidas_Clave", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facturasPartidas_Clave));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }
                if (toReturn.Rows.Count > 0)
                {

                    _itemcodeServicio = (string)toReturn.Rows[0]["Itemcode"];
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public  DataTable SelectPartProduccionCerrar()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Partidas_ProduccionCerrar]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }

               
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public  DataTable SelectPartProduccionCerrarLogPartidas()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_Partidas_ProduccionCerraLog]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectOne' reported the ErrorCode: " + _errorCode);
                }
                if (toReturn.Rows.Count > 0)
                {
                    _prodCerrada = (Int32)toReturn.Rows[0]["Cat_Status_Bufer_Id"];
                    
                }
               
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("FacturasPartidas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public  DataTable SelectAllProducion()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectAll_Parti]";
            //cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectAll_PartiPrue]";
            
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'FacturasId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacturasId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWFacturasIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_SelectAllWFacturasIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("FacturasPartidas");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectAllWFacturasIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("FacturasPartidas::SelectAllWFacturasIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public DataTable SelectFacturasPartidasEmbSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasPartidasEmbSelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@FacturasId", SqlDbType.Int);
                prm.Value = FacturasId;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasPartidasEmbSelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectFacturasPartidasEmbSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectFacturasPartidasCalidadSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasPartidasCalidad_SelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@FacturasId", SqlDbType.Int);
                prm.Value = FacturasId;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasPartidasCalidad_SelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectFacturasPartidasCalidadSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public bool UpdateCalidad()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FactPartUPD]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@FacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@FacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));

                cmdToExecute.Parameters.Add(new SqlParameter("@FacturasPartidasRecibCalidad", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Recib_Calidad));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public DataTable SelectFacturasPartidasEmbarSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_FacturasPartidasEmb_SelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@FacturasId", SqlDbType.Int);
                prm.Value = FacturasId;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasPartidasEmb_SelAll' reported the ErrorCode: " + _errorCode);
                }

                //if (toReturn.Rows.Count > 0)
                //{
                //    _facturasId = (Int32)toReturn.Rows[0]["FacturasId"];
                //    _facturas_DocEntry = (Int32)toReturn.Rows[0]["Facturas_DocEntry"];
                //    _facturas_DocNum = (Int32)toReturn.Rows[0]["Facturas_DocNum"];
                //    _facturas_CardCode = (string)toReturn.Rows[0]["Facturas_CardCode"];
                //    _facturas_CardName = (string)toReturn.Rows[0]["Facturas_CardName"];
                //    _facturas_Address = (string)toReturn.Rows[0]["Facturas_Address"];
                //    _facturas_ZipCode = toReturn.Rows[0]["Facturas_ZipCode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Facturas_ZipCode"];
                //    _facturas_DocDate = (DateTime)toReturn.Rows[0]["Facturas_DocDate"];
                //    _facturas_DirEmbar = (string)toReturn.Rows[0]["Facturas_DirEmbar"];
                //    _facturas_SlpCode = (Int16)toReturn.Rows[0]["Facturas_SlpCode"];
                //    _facturas_ImplicaProduccion = (string)toReturn.Rows[0]["Facturas_ImplicaProduccion"];
                //    _facturas_TipoPago = (string)toReturn.Rows[0]["Facturas_TipoPago"];
                //    _facturas_PlazoDias = (Int16)toReturn.Rows[0]["Facturas_PlazoDias"];
                //    _facturas_FechaVencimiento = (DateTime)toReturn.Rows[0]["Facturas_FechaVencimiento"];
                //}
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectFacturasPartidasEmbarSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        #region **************Marcos***************
        public DataTable SelectProducVale()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_Facturas_SelectProVale]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturas_DocNum", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturas_DocNum));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public bool UpdateSurtidoKN()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_UpdateSurKN]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_UpdateSurKN' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public bool UpdateSurtidoKNExecepcion()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_post_FacturasPartidas_UpdateSurKNONE]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Id));
               cmdToExecute.Parameters.Add(new SqlParameter("@iFacturasPartidas_Surti_KN", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facturasPartidas_Surti_KN));    
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_post_FacturasPartidas_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        #endregion



        #region Metodos Luis

        public DataTable SelAllFactPartCalOKSinProd()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spSelAllFactPartCalOKSinProd]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spSelAllFactPartCalOKSinProd' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelAllFactPartCalOKSinProd::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelAllFactPartRecibEmb()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spSelAllFactPartRecibEmb]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("FacturasPartidas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spSelAllFactPartRecibEmb' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("FacturasPartidas::SelAllFactPartRecibEmb::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable PartidasARecibirSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactPartEmbarcarSelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@FacturaId", SqlDbType.Int);
                prm.Value = FacturasId;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_FacturasCalidad_SelAll' reported the ErrorCode: " + _errorCode);
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::SelectFacturasCalidadSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable FactPartOKCalSinProdSelAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[spFactPartOKCalSinProdSelAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Facturas");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                SqlParameter prm = new SqlParameter("@FacturasId", SqlDbType.Int);
                prm.Value = FacturasId;
                cmdToExecute.Parameters.Add(prm);

                //cmdToExecute.Parameters.Add(new SqlParameter("@ImpProd", SqlDbType.VarChar));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'spFactPartOKCalSinProdSelAll' reported the ErrorCode: " + _errorCode);
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Facturas::FactPartOKCalSinProdSelAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }



        #endregion 

        #region Class Property Declarations
        public SqlInt32 FacturasId
        {
            get
            {
                return _facturasId;
            }
            set
            {
                SqlInt32 facturasIdTmp = (SqlInt32)value;
                if (facturasIdTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasId", "FacturasId can't be NULL");
                }
                _facturasId = value;
            }
        }
        public SqlInt32 ProdCerrada
        {
            get { return _prodCerrada; }
            set { _prodCerrada = value; }
        }
        public SqlString ItemcodeServicio
        {
            get { return _itemcodeServicio; }
            set { _itemcodeServicio = value; }
        }
        public SqlInt32 Facturas_DocNum
        {
            get { return _facturas_DocNum; }
            set { _facturas_DocNum = value; }
        }
        public SqlInt32 FacturasPartidas_Id
        {
            get
            {
                return _facturasPartidas_Id;
            }
            set
            {
                SqlInt32 facturasPartidas_IdTmp = (SqlInt32)value;
                if (facturasPartidas_IdTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Id", "FacturasPartidas_Id can't be NULL");
                }
                _facturasPartidas_Id = value;
            }
        }
        public SqlInt32 ProduccionId
        {
            get { return _produccionId; }
            set { _produccionId = value; }
        }

        public SqlString FacturasPartidas_Clave
        {
            get
            {
                return _facturasPartidas_Clave;
            }
            set
            {
                SqlString facturasPartidas_ClaveTmp = (SqlString)value;
                if (facturasPartidas_ClaveTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Clave", "FacturasPartidas_Clave can't be NULL");
                }
                _facturasPartidas_Clave = value;
            }
        }


        public SqlString FacturasPartidas_DescripCion
        {
            get
            {
                return _facturasPartidas_DescripCion;
            }
            set
            {
                SqlString facturasPartidas_DescripCionTmp = (SqlString)value;
                if (facturasPartidas_DescripCionTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_DescripCion", "FacturasPartidas_DescripCion can't be NULL");
                }
                _facturasPartidas_DescripCion = value;
            }
        }


        public SqlInt32 FacturasPartidas_Cantidad
        {
            get
            {
                return _facturasPartidas_Cantidad;
            }
            set
            {
                SqlInt32 facturasPartidas_CantidadTmp = (SqlInt32)value;
                if (facturasPartidas_CantidadTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Cantidad", "FacturasPartidas_Cantidad can't be NULL");
                }
                _facturasPartidas_Cantidad = value;
            }
        }


        public SqlInt32 FacturasPartidas_Bufer
        {
            get
            {
                return _facturasPartidas_Bufer;
            }
            set
            {
                SqlInt32 facturasPartidas_BuferTmp = (SqlInt32)value;
                if (facturasPartidas_BuferTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Bufer", "FacturasPartidas_Bufer can't be NULL");
                }
                _facturasPartidas_Bufer = value;
            }
        }


        public SqlString FacturasPartidas_Pedimiento
        {
            get
            {
                return _facturasPartidas_Pedimiento;
            }
            set
            {
                _facturasPartidas_Pedimiento = value;
            }
        }


        public SqlInt32 FacturasPartidas_OrdenDiseno
        {
            get
            {
                return _facturasPartidas_OrdenDiseno;
            }
            set
            {
                _facturasPartidas_OrdenDiseno = value;
            }
        }


        public SqlInt32 FacturasPartidas_Surti_KN
        {
            get
            {
                return _facturasPartidas_Surti_KN;
            }
            set
            {
                SqlInt32 facturasPartidas_Surti_KNTmp = (SqlInt32)value;
                if (facturasPartidas_Surti_KNTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Surti_KN", "FacturasPartidas_Surti_KN can't be NULL");
                }
                _facturasPartidas_Surti_KN = value;
            }
        }


        public SqlInt32 FacturasPartidas_DifKNNotaCre
        {
            get
            {
                return _facturasPartidas_DifKNNotaCre;
            }
            set
            {
                SqlInt32 facturasPartidas_DifKNNotaCreTmp = (SqlInt32)value;
                if (facturasPartidas_DifKNNotaCreTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_DifKNNotaCre", "FacturasPartidas_DifKNNotaCre can't be NULL");
                }
                _facturasPartidas_DifKNNotaCre = value;
            }
        }


        public SqlInt32 FacturasPartidas_Recib_Xhala
        {
            get
            {
                return _facturasPartidas_Recib_Xhala;
            }
            set
            {
                SqlInt32 facturasPartidas_Recib_XhalaTmp = (SqlInt32)value;
                if (facturasPartidas_Recib_XhalaTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Recib_Xhala", "FacturasPartidas_Recib_Xhala can't be NULL");
                }
                _facturasPartidas_Recib_Xhala = value;
            }
        }


        public SqlInt32 FacturasPartidas_Recibi_Embar
        {
            get
            {
                return _facturasPartidas_Recibi_Embar;
            }
            set
            {
                SqlInt32 facturasPartidas_Recibi_EmbarTmp = (SqlInt32)value;
                if (facturasPartidas_Recibi_EmbarTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Recibi_Embar", "FacturasPartidas_Recibi_Embar can't be NULL");
                }
                _facturasPartidas_Recibi_Embar = value;
            }
        }


        public SqlInt16 FacturasPartidas_Produccion
        {
            get
            {
                return _facturasPartidas_Produccion;
            }
            set
            {
                SqlInt16 facturasPartidas_ProduccionTmp = (SqlInt16)value;
                if (facturasPartidas_ProduccionTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Produccion", "FacturasPartidas_Produccion can't be NULL");
                }
                _facturasPartidas_Produccion = value;
            }
        }


        public SqlString FacturasPartidas_EntregaParcia
        {
            get
            {
                return _facturasPartidas_EntregaParcia;
            }
            set
            {
                _facturasPartidas_EntregaParcia = value;
            }
        }


        public SqlInt32 FacturasPartidas_EmbarcadoClie
        {
            get
            {
                return _facturasPartidas_EmbarcadoClie;
            }
            set
            {
                SqlInt32 facturasPartidas_EmbarcadoClieTmp = (SqlInt32)value;
                if (facturasPartidas_EmbarcadoClieTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_EmbarcadoClie", "FacturasPartidas_EmbarcadoClie can't be NULL");
                }
                _facturasPartidas_EmbarcadoClie = value;
            }
        }


        public SqlInt32 FacturasPartidas_Recib_Calidad
        {
            get
            {
                return _facturasPartidas_Recib_Calidad;
            }
            set
            {
                SqlInt32 facturasPartidas_Recib_CalidadTmp = (SqlInt32)value;
                if (facturasPartidas_Recib_CalidadTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Recib_Calidad", "FacturasPartidas_Recib_Calidad can't be NULL");
                }
                _facturasPartidas_Recib_Calidad = value;
            }
        }


        public SqlInt32 FacturasPartidas_Producidos
        {
            get
            {
                return _facturasPartidas_Producidos;
            }
            set
            {
                SqlInt32 facturasPartidas_ProducidosTmp = (SqlInt32)value;
                if (facturasPartidas_ProducidosTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Producidos", "FacturasPartidas_Producidos can't be NULL");
                }
                _facturasPartidas_Producidos = value;
            }
        }


        public SqlInt32 FacturasPartidas_Recib_Produc
        {
            get
            {
                return _facturasPartidas_Recib_Produc;
            }
            set
            {
                SqlInt32 facturasPartidas_Recib_ProducTmp = (SqlInt32)value;
                if (facturasPartidas_Recib_ProducTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("FacturasPartidas_Recib_Produc", "FacturasPartidas_Recib_Produc can't be NULL");
                }
                _facturasPartidas_Recib_Produc = value;
            }
        }

        public SqlInt16 FacturasPartidas_RecibBultos
        {
            get
            {
                return _facturasPartidas_RecibBultos;
            }
            set
            {
               _facturasPartidas_RecibBultos = value;
            }
        }





        #endregion
	}
}
